# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: release

on:
  # push:
  #   tags:
  #     - "[0-9]+.[0-9]+.[0-9]+"
  #     - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
  #     - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
  #     - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"
  workflow_dispatch: # For manual trigger
    inputs:
      BUMP_VERSION_NUMBER:
        description: "Version number to bump to (if empty, publish with git number)"
        required: false
        default: ""
        type: string

env:
  PACKAGE_NAME: gama-gymnasium
  OWNER: gama-platform
  REPOSITORY: gama-gymnasium

jobs:

  details:
    runs-on: ubuntu-latest

    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F- '{print $1}')
            SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Version is $NEW_VERSION"
            echo "Suffix is $SUFFIX"
            echo "Tag name is $TAG_NAME"
          else
            if [  -z "${{ inputs.BUMP_VERSION_NUMBER }}" ]; then
              TAG_NAME="${{ inputs.BUMP_VERSION_NUMBER }}"
              NEW_VERSION=$(echo $TAG_NAME | awk -F- '{print $1}')
              SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
              SUFFIX=""
              echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
              echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
              echo "Version is $NEW_VERSION
              echo "Suffix is $SUFFIX"
              echo "Tag name is $TAG_NAME"
            else
              echo "No tag found"
              exit 1
            fi
          fi
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last")
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      # - name: Compare versions and exit if not newer
      #   run: |
      #     NEW_VERSION=${{ needs.details.outputs.new_version }}
      #     LATEST_VERSION=$latest_previous_version
      #     if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
      #       echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
      #       exit 1
      #     else
      #       echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
      #     fi

  setup_and_build:
    needs: [details]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          
      - name: Bump package version
        if: "${{ inputs.BUMP_VERSION_NUMBER != '' }}"
        working-directory: ./python
        run: sed "s/^version =.*/version = \"${{ inputs.BUMP_VERSION_NUMBER }}\"/g" ${{ github.workspace }}/python_package/pyproject.toml

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build hatchling

      - name: Update version in pyproject.toml
        working-directory: python_package
        run: |
          sed -i 's/version = "[^"]*"/version = "${{ needs.details.outputs.new_version }}"/' pyproject.toml

      - name: Install dependencies
        working-directory: python_package
        run: |
          pip install -e .

      - name: Build source and wheel distributions
        working-directory: python_package
        run: |
          python -m build

      - name: Bump package version
        if: "${{ inputs.BUMP_VERSION_NUMBER != '' }}"
        working-directory: ./python
        run: |
          git config --global user.email "my.gama.bot@gmail.com"
          git config --global user.name "GAMA Bot"
          git remote set-url origin https://gama-bot:$BOT_TOKEN@github.com/gama-platform/gama.clients.git
          git add ${{ github.workspace }}/python_package/pyproject.toml
          git commit -m "Bump package version to ${{ inputs.BUMP_VERSION_NUMBER }}"
          git push
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: python_package/dist/

  pypi-publish:
    name: Upload release to PyPI
    needs: [setup_and_build]
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/gama-gymnasium
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ github.workspace }}/dist/

      - name: Publish distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ${{ github.workspace }}/dist/

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for the tag

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ${{ github.workspace }}/dist/

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ github.workspace }}/dist/*
          body: ${{ needs.details.outputs.tag_name }} 
          generate_release_notes: true
